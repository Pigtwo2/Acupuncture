import pandas as pdimport jiebafrom rouge import Rougeimport argparseimport logging# Set up logginglogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')def calculate_rouge_scores(reference, candidate):    """    Calculate ROUGE scores between a reference and a candidate text.    :param reference: The reference text.    :param candidate: The candidate text.    :return: A dictionary of ROUGE scores.    """    rouge = Rouge()    reference = " ".join(jieba.cut(reference))    candidate = " ".join(jieba.cut(candidate))    scores = rouge.get_scores(candidate, reference, avg=True)      return scoresdef load_excel(file_path):    """    Load an Excel file into a pandas DataFrame.    :param file_path: Path to the Excel file.    :return: pandas DataFrame containing the Excel file data.    """    try:        return pd.read_excel(file_path, engine='openpyxl')    except Exception as e:        logging.error(f"Error loading Excel file: {e}")        raisedef calculate_average_rouge(df, reference_column, candidate_column):    """    Calculate average ROUGE scores across all entries in the DataFrame.    :param df: pandas DataFrame containing the reference and candidate texts.    :param reference_column: The column name containing the reference texts.    :param candidate_column: The column name containing the candidate texts.    :return: A dictionary of average ROUGE scores.    """    total_scores = {'rouge-1': {'f': 0, 'p': 0, 'r': 0},                    'rouge-2': {'f': 0, 'p': 0, 'r': 0},                    'rouge-l': {'f': 0, 'p': 0, 'r': 0}}    count = 0    for _, row in df.iterrows():        count += 1        reference = row[reference_column]        candidate = str(row[candidate_column])        scores = calculate_rouge_scores(reference, candidate)        for key in total_scores:            for metric in scores[key]:                total_scores[key][metric] += scores[key][metric]    avg_scores = {key: {metric: total_scores[key][metric] / count for metric in total_scores[key]} for key in total_scores}    return avg_scoresdef main():    parser = argparse.ArgumentParser(description="Calculate average ROUGE scores for text data in an Excel file.")    parser.add_argument("file_path", type=str, help="Path to the Excel file containing the data.")    parser.add_argument("--reference_column", type=str, default="label", help="Column name for reference sentences.")    parser.add_argument("--candidate_column", type=str, default="gpt-ft", help="Column name for candidate sentences.")        args = parser.parse_args()    df = load_excel(args.file_path)        avg_scores = calculate_average_rouge(df, args.reference_column, args.candidate_column)    for key in avg_scores:        logging.info(f"Average {key.upper()} - F: {avg_scores[key]['f']:.4f}, P: {avg_scores[key]['p']:.4f}, R: {avg_scores[key]['r']:.4f}")if __name__ == '__main__':    main()