import pandas as pdimport jiebafrom nltk.translate.bleu_score import sentence_bleuimport argparseimport logging# Set up logginglogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')def download_nltk_resources():    import nltk    nltk.download('punkt')def calculate_bleu_scores(reference, candidate, weights):    """    Calculate BLEU scores for a single pair of reference and candidate sentences.    :param reference: The reference sentence.    :param candidate: The candidate sentence.    :param weights: The weights for BLEU calculation.    :return: The BLEU score.    """    reference_tokens = list(jieba.cut(reference))    candidate_tokens = list(jieba.cut(candidate))    return sentence_bleu([reference_tokens], candidate_tokens, weights=weights)def load_excel(file_path):    """    Load an Excel file into a pandas DataFrame.    :param file_path: Path to the Excel file.    :return: pandas DataFrame containing the Excel file data.    """    try:        return pd.read_excel(file_path, engine='openpyxl')    except Exception as e:        logging.error(f"Error loading Excel file: {e}")        raisedef calculate_average_bleu(df, reference_column, candidate_column, weights_options):    """    Calculate average BLEU scores for different weights across all sentence pairs in the DataFrame.    :param df: pandas DataFrame with reference and candidate sentences.    :param reference_column: Column name for reference sentences.    :param candidate_column: Column name for candidate sentences.    :param weights_options: List of weights tuples for BLEU calculation.    :return: List of average BLEU scores for each set of weights.    """    total_scores = [0] * len(weights_options)    count = 0    for index, row in df.iterrows():        count += 1        reference = row[reference_column]        candidate = str(row[candidate_column])        for i, weights in enumerate(weights_options):            score = calculate_bleu_scores(reference, candidate, weights)            total_scores[i] += score    avg_scores = [score / count for score in total_scores]    return avg_scoresdef main():    parser = argparse.ArgumentParser(description="Calculate average BLEU scores for text data in an Excel file.")    parser.add_argument("file_path", type=str, help="Path to the Excel file containing the data.")    parser.add_argument("--reference_column", type=str, default="label", help="Column name for reference sentences.")    parser.add_argument("--candidate_column", type=str, default="chatglm3-6b", help="Column name for candidate sentences.")        args = parser.parse_args()    download_nltk_resources()    df = load_excel(args.file_path)        weights_options = [        (1, 0, 0, 0),  # BLEU-1        (0.5, 0.5, 0, 0),  # BLEU-2        (0.33, 0.33, 0.33, 0),  # BLEU-3        (0.25, 0.25, 0.25, 0.25)  # BLEU-4    ]    avg_scores = calculate_average_bleu(df, args.reference_column, args.candidate_column, weights_options)    for i, avg_score in enumerate(avg_scores, 1):        print(f"Average BLEU-{i}: {avg_score:.4f}")if __name__ == '__main__':    main()